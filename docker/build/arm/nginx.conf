
#user  nginx;
#worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

    #导入rtmp配置文件
    include conf.d/live.conf;


http {
    include       mime.types;
    default_type  application/octet-stream;
	
   
    
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
   
	
    server {
	listen 80;
	server_name  localhost;
	
      	
	
	location /mytv/ {
		alias   /home/www/mytv/;
		index index.html index.htm;
                try_files $uri $uri/  /mytv/index.html; #vue内部路由，解决404问题
		#index index.html index.htm;
	}
	
	#配置vue路由转发
	location @router {
		rewrite ^.*$ /mytv/index.html last;
	}
	
	#配置vue代理转发，由于vue在开发中的proxy配置是本地的，部署到nginx时还需要在nginx另外配置转发
	location /api/ {
		rewrite ^b/(.*)$ /$1 break;
		proxy_pass http://127.0.0.1:8899/;
	}	
	
	#rtmp-flv原生流
        location /live {
                flv_live on;
        }

	#rtmp-flv模块转码流
        location /flv {
                #add_header 'Access-Control-Allow-Origin' '*';
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Headers X-Requested-With;
                add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
                flv_live on;
                chunked_transfer_encoding on;
        }

    }

    server {
        listen       8899;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
            #root   html;
            #index  index.html index.htm;
        #}
		
	index index.php index.html index.htm;
	root  /home/www/livingServer/public/;

	#php电视直播后台
	location / {
		add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Headers X-Requested-With;
                add_header Access-Control-Allow-Methods GET,POST,OPTIONS;	
		try_files $uri $uri/ /index.php?$query_string;
	
	}	
	
	#php-fpm配置
	location  ~ [^/]\.php(/|$) {
                fastcgi_split_path_info  ^(.+?\.php)(/.*)$;
                if (!-f $document_root$fastcgi_script_name) {
                        return 404;
                }
		#指定上游解析dns为docker的内部dns服务
		resolver 127.0.0.11;
		#通过设置变量upstream 为同一网络下其它主机服务
		set $upstream php-fpm:9000;
		#这里通过变量名获取访问地址信息，可以避免nginx找不到上游服务拒绝启动，在上游服务恢复之前只会返回502错误
                fastcgi_pass   $upstream;
                fastcgi_index  index.php;
                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                fastcgi_param  PATH_INFO        $fastcgi_path_info;
                fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;
                include        fastcgi_params;
        }	
	
	

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

	}
